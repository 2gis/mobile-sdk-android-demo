@Library('core') _

pipeline {
    agent {
        label 'ubuntu-18.04 && x64 && hw'
    }

    options {
        // Сколько последних сборок храним?
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Отключаем параллельный запуск
        disableConcurrentBuilds()
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/jdk-17.0.7+7'
    }

    triggers {
        cron('@midnight')
    }

    stages {
        stage('Prepare') {
            steps {
                withCredentials([
                    string(credentialsId: 'DGIS_DIRECTORY_APP_KEY', variable: 'DIRECTORY_KEY'),
                    string(credentialsId: 'DGIS_MAP_API_KEY', variable: 'MAP_KEY'),
                    string(credentialsId: 'NSDK_UNSTRIPPED_LIBS_BASE_URL', variable: 'UNSTRIPPED_LIBS_URL'),
                    string(credentialsId: 'ARTIFACTORY_HOST', variable: 'ARTIFACTORY_HOST'),
                    file(credentialsId: 'NSDK_DEMOAPP_GOOGLE_SERVICES', variable: 'GOOGLE_SERVICES')
                ]) {
                    script {
                        def localProperties = """\
                            sdk.dir=/opt/android-sdk/

                            dgisMapApiKey=${env.MAP_KEY}
                            dgisDirectoryApiKey=${env.DIRECTORY_KEY}
                        """.stripIndent()

                        writeFile file: "local.properties", text: localProperties

                        if (env.BRANCH_NAME != 'master') {
                            sh "echo sdkRepository=${ARTIFACTORY_HOST}/sdk-maven-all >> local.properties"
                        }

                        sh "cat ${env.GOOGLE_SERVICES} > app/google-services.json"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh(
                    label: 'Building project',
                    script: "./gradlew clean build test lint"
                )
            }
        }

        stage('Signing artifacts') {
            steps {
                withCredentials([
                        file(credentialsId: 'RELEASE_KEYSTORE', variable: 'RELEASE_KEYSTORE'),
                        string(credentialsId: 'RELEASE_KEYSTORE_PASSWORD', variable: 'RELEASE_KEYSTORE_PASSWORD'),
                        string(credentialsId: 'NSDK_RELEASE_KEY_ALIAS', variable: 'RELEASE_KEY_ALIAS'),
                        string(credentialsId: 'NSDK_RELEASE_KEY_PASSWORD', variable: 'RELEASE_KEY_PASSWORD'),
                ]) {

                    // Signing output apk
                    sh """
                        /opt/android-sdk/build-tools/29.0.3/apksigner sign \
                            --ks \$RELEASE_KEYSTORE \
                            --key-pass env:RELEASE_KEY_PASSWORD \
                            --ks-pass env:RELEASE_KEYSTORE_PASSWORD \
                            --ks-key-alias \$RELEASE_KEY_ALIAS \
                            --out build/app/outputs/apk/release/app-release.apk \
                            build/app/outputs/apk/release/app-release-unsigned.apk
                    """
                    sh '/opt/android-sdk/build-tools/29.0.3/apksigner verify build/app/outputs/apk/release/app-release.apk'
                }
            }
        }

        stage('Deploy') {
            steps {
                archiveArtifacts(artifacts: 'build/app/outputs/apk/debug/app-debug.apk')
                archiveArtifacts(artifacts: 'build/app/outputs/apk/release/app-release.apk')

                script {
                    def artifactsForQr = [:]
                    def apks = currentBuild.rawBuild.getArtifacts().findAll {
                        it.getFileName().contains('.apk')
                    }
                    apks.each {
                        artifactsForQr[it.getFileName()] = qrHelper.createQr(env.BUILD_URL + 'artifact/' + it.getHref())
                    }
                    artifactsForQr.each {name, link ->
                        currentBuild.description += "<br>$name<br><img src=$link alt=$name style=\"max-width:150px;\"/>"
                    }
                }
            }
        }
    }
}
