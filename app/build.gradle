plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
    alias libs.plugins.undercouch.download
    alias libs.plugins.ktlint
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

def unstrippedLibsDir = "${project.buildDir}/unstripped/"

android {
    namespace "ru.dgis.sdk.demo"
    compileSdk 34

    defaultConfig {
        applicationId "ru.dgis.sdk.demo"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "0.0.1"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            firebaseCrashlytics {
                nativeSymbolUploadEnabled false
                unstrippedNativeLibsDir unstrippedLibsDir
            }
        }
    }

    buildFeatures {
        viewBinding true
    }

    splits {
        if (libs.versions.dgis.sdk.get().endsWith("SNAPSHOT") && !libs.versions.dgis.sdk.get().endsWith("RC-SNAPSHOT")) {
            /*
            SNAPSHOT собирается только x86, armeabi-v7a для эконимии ресурса на билд сервере
            RELEASE есть под все возможные ABI
             */
            abi {
                enable true
                reset()
                //noinspection ChromeOsAbiSupport
                include "x86", "armeabi-v7a"
                universalApk false
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    applicationVariants.configureEach {
        it.compileConfiguration.resolutionStrategy {
            preferProjectModules()
        }
        it.runtimeConfiguration.resolutionStrategy {
            preferProjectModules()
        }
        it.annotationProcessorConfiguration.resolutionStrategy {
            preferProjectModules()
        }
    }

    lint {
        abortOnError = true
        ignoreWarnings = false
        warningsAsErrors = true
        textReport = true
        baseline file("config/androidLint/baseline.xml")
    }
}

ktlint {
    android = true
    outputToConsole = true
}

def fetchingTasks = ['x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'].collect { arch ->
    def libsArchive = "${project.buildDir}/downloads/${arch}.zip"

    def downloadTask = project.tasks.register("downloadLibs-$arch", Download) {

        src libs.dgis.sdk.map { sdkModule ->
            def libsUrl = localProperties.getProperty("dgisUnstrippedLibsUrl", "")
            if (libsUrl.isEmpty()) {
                throw GradleException("You have to define dgisUnstrippedLibsUrl in local.properties to use unstripped libraries")
            }
            def version = sdkModule.getVersion()
            def flavour = sdkModule.getModule().getName().split('-').last()

            "${libsUrl}/sdk-bundle-release/android/ru/dgis/sdk/libs-${flavour}/${version}/${version}-${flavour}-${arch}.zip"
        }
        dest libsArchive
        username System.getenv('ARTIFACTORY_USERNAME')
        password System.getenv('ARTIFACTORY_PASSWORD')
        overwrite false
    }
    project.tasks.register("unzipLibs-$arch", Copy) {
        dependsOn downloadTask

        from zipTree(libsArchive)
        into "$unstrippedLibsDir/${arch}"
    }
}

def getUnstrippedTask = tasks.register("getUnstrippedLibraries") {
    group "Release Build"
    description "Downloads unstripped native libraries for all architectures"

    dependsOn fetchingTasks
}

afterEvaluate { project ->
    def uploadTasks = project.tasks.matching {
        it.name.contains('CrashlyticsSymbolFile')
    }
    uploadTasks.forEach {
        it.configure {
            dependsOn getUnstrippedTask
        }
    }
    project.tasks.processDebugGoogleServices {
       onlyIf { false }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libs.kotlin.stdlib

    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.core.ktx
    implementation libs.androidx.fragment
    implementation libs.androidx.legacySupport
    implementation libs.gms.locations
    implementation libs.material

    implementation libs.retrofuture

    releaseImplementation platform("com.google.firebase:firebase-bom:${libs.versions.firebase.bom.get()}")
    releaseImplementation 'com.google.firebase:firebase-analytics-ktx'
    releaseImplementation 'com.google.firebase:firebase-crashlytics-ndk'

    implementation libs.dgis.sdk

    // Without version catalogs you can just use:
    // - compileOnlyDependenciesMetadata "ru.dgis.sdk:sdk-full:<version>:sources"
    compileOnlyDependenciesMetadata(libs.dgis.sdk) {
        artifact {
            classifier = "sources"
        }
    }
}
