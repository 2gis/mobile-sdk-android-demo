apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'de.undercouch.download'

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

def resolvedVersion = null

afterEvaluate { project ->
    project.configurations.releaseRuntimeClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each({ dep ->
        if (dep.getModuleName() == 'sdk-map' || dep.getModuleName() == 'sdk-full') {
            resolvedVersion = dep.getModuleVersion()
        }
    })
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "ru.dgis.sdk.app"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "0.0.1"

        resValue("string", "dgis_map_api_key", localProperties.getProperty("dgisMapApiKey"))
        resValue("string", "dgis_directory_api_key", localProperties.getProperty("dgisDirectoryApiKey"))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            firebaseCrashlytics {
                def unstrippedLibsDir = localProperties.getProperty("dgisUnstrippedLibsDir")
                if (unstrippedLibsDir) {
                    nativeSymbolUploadEnabled true
                    strippedNativeLibsDir "${project.buildDir}/intermediates/stripped_native_libs/release/out/lib"
                    unstrippedNativeLibsDir "$unstrippedLibsDir/$resolvedVersion"
                }
            }
        }
    }

    splits {
        if (dgis_sdk_version.endsWith("SNAPSHOT") && !dgis_sdk_version.endsWith("RC-SNAPSHOT")) {
            /*
            SNAPSHOT собирается только x86, armeabi-v7a для эконимии ресурса на билд сервере
            RELEASE есть под все возможные ABI
             */
            abi {
                enable true
                reset()
                include "x86", "armeabi-v7a"
                universalApk false
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def unstrippedLibsUrl = localProperties.getProperty("dgisUnstrippedLibsUrl", "")
if (!unstrippedLibsUrl.isEmpty()) {
    def downloadTask = tasks.register('downloadLibsZip', Download) {
        src "${unstrippedLibsUrl}/sdk-libs-release-local/android/ru/dgis/sdk/libs/$resolvedVersion/libs-${resolvedVersion}.zip"
        dest "$buildDir"
        username System.getenv('ARTIFACTORY_USERNAME')
        password System.getenv('ARTIFACTORY_PASSWORD')
        overwrite false
    }
    def uploadLibTask = tasks.register('getUnstrippedLibraries', Copy) {
        dependsOn downloadTask
        from zipTree("$buildDir/libs-${resolvedVersion}.zip")
        into "$buildDir/nativeLibs/$resolvedVersion"
    }
    afterEvaluate { project ->
        project.tasks.assembleRelease {
            finalizedBy uploadLibTask
        }
    }
}

afterEvaluate { project ->
    project.tasks.processDebugGoogleServices {
       onlyIf { false }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.fragment:fragment-ktx:1.3.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.gms:play-services-location:17.1.0"
    implementation "com.google.android.material:material:1.3.0"
    implementation "com.sothree.slidinguppanel:library:3.4.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'net.sourceforge.streamsupport:android-retrofuture:1.7.3'

    releaseImplementation platform('com.google.firebase:firebase-bom:26.1.0')
    releaseImplementation 'com.google.firebase:firebase-analytics'
    releaseImplementation 'com.google.firebase:firebase-crashlytics-ndk'

    implementation "ru.dgis.sdk:sdk-map:$dgis_sdk_version"
}
